INTRODUCTION

I want to introduce you to CatWeb. A ROBLOX game where players can create their own site (2 Dimensions). Inside CatWeb, players can add a "script" element into their site (NOT Luau coding). I will be teaching you how to actually script inside CatWeb. Let's start with the basics, stuff that is not relevant to scripting. CatWeb has a TLD just like the internet. The TLD used by CatWeb is ".rbx" you should never take this seriously as the TLD is not real and does not exist on the internet. CatWeb current version is v2.13.0.4! Users can visit other user's site and users are also able to promote their site. Users can create a subdomain and page for their site, this should be self-explanatory. CatWeb has a limit for how many elements can be inserted onto a user's site. CatWeb also offers a premium gamepass (for 119 robux, regional pricing might be applied) which allows the user to have 200 element limit opposed to before 100, a premium chat tag, limit of 5 subdomains (instead of 3), limit of 30 pages (instead of 15), 3 free sites (instead of 1). The premium gamepass does not come with the Cookies gamepass. The Cookies gamepass (for 35 robux, regional pricing might be applied) allows the user to access the "Cookies" block type which I will explain later. Now, I will use chapters to teach you how to script or just basic knowledge in CatWeb so it is easier for you to understand. CatWeb uses hex color code but inputting RGB also works as it will convert it automatically to hex. Users get a free domain for the first time joining and they can delete this domain to get "Domain Credit" in which they can register another domain with the domain credit subtracted.

(p.s. CatWeb only supports landscape mode and does not plan on adding portrait mode for mobile devices any time soon)

ELEMENTS BASICS

First, you need to understand what shapes a site and gives it its visual appearance. In CatWeb, there is a total of 10 elements (excluding styling elements) which site editors can use. Here is a complete list of them: Frame, Text, Image, Link, Button, Donation, Input, Scroller, Script and Folder. There is also styling elements is used to style an element (total of 8 of them). Styling elements can only be applied to an element that shows a visual on a site (Frame, Image, Link, Button, Donation, Input, Scroller) I will refer to them as "visual elements". Here is a complete list of styling elements: Outline, Corner, List, Grid, Aspect Ratio, Constraint, Gradient and Padding. An element always has a property inside of them. Properties of an element can be viewed inside the properties tab (below elements tab). For visual elements, you can adjust their background color, background transparency, position, size, anchor point, rotation, layer and visibility. All of the property of each visual element I mentioned can be changed manually or through a script.

A little side note, for some properties, there are two inputs differentiated by a comma, they represent scale and offset (just like how they work in Studio). CatWeb automatically use scale by default instead of offset, but you can always input an offset into these properties. Their format is: Position - scale,offset ; Size - {scaleX,offsetX},{scaleY,offsetY} ; Radius - scale,offset (1 in scale makes a full circle, offset uses dp)
Any element counts as 1 element, this includes styling elements. I will now explain special properties for every visual element/styling element:

Visual Element:
- Frame: Has all visual element properties, nothing special.
- Text: There is a special property category inside the properties of Text which is "Text". The properties of the "Text" property category are: Text (Modify the text itself), Font, Horizontal Alignment (Left, Center, Right), Vertical Alignment (Top, Center, Bottom), Size (size of the text, by default it is scaled but can be changed with a number), Color (color of the text). Text element also have all visual element properties.
* It's important to note that text elements have a rendering limit of approximately 16,000-32,000 characters. Exceeding this limit will cause a TEXT_OVERLOAD error and prevent further text from being displayed in that element. There is also a limit of 200,000 characters for a text element (including non-rendered characters).
- Image: Contains a special property category called "Image". Here is all of the properties inside of the "Image" property category: Image ID, Transparency (Image Transparency), Scale Type (Crop, Fit, Slice, Stretch, Tile, Stretch is used by default), Tint (modifies the image color, #ffffff is the default color). Image element also have all visual element properties.
- Link: Contains a special property category called "Link". Here is all of the properties inside of the "Link" property category: Reference (The link that the user will be redirected to when clicked), Open in a new tab (true/false). Link element also have all visual element properties and "Text" property category which I have mentioned before.
- Button: No special property, contains the "Text" property category and all visual element properties.
- Donation: Contains a special property category called "Donation". Here is all of the properties inside of the "Donation" property category: Item ID (can be a gamepass, shirt, pants, t-shirt, or a developer product), Reference (where to redirect the player when the item is bought, this is optional), Product Type (Asset, GamePass, Product). The donation properties also have the "Text" property category and have all the visual element properties.
- Input: No special property, though it has a modified version of the "Text" property category including 3 new fields which is: Placeholder, Placeholder Color and Editable (is the input editable or not). This element also have all the visual element properties.
- Scrollable Frame: Contains a special property category called "Scrollbar". Here is all of the properties inside of the "Scrollbar" property category: Color (Color of the scrollbar), Transparency, Thickness, Canvas Size. This element also have all the visual element properties.

Styling Element:
- Outline: Mode (Border, Contextual, Border is default), Type (Bevel, Miter, Round, Round is default), Color, Thickness, Transparency
- Corner: Radius ({number},{number})
- List: Direction (Horizontal, Vertical, Vertical is default), Padding (The spaces between each element on the list eg: 1,0), Vertical Alignment (Bottom, Center, Top), Horizontal Alignment (Center, Left, Right, Left by default)
- Grid: Same as the above except no "Direction" property and a new property addition "Size"
- Aspect Ratio: Ratio (For example, 1 is 1:1 and 1.77 is 16:9. 1 by default)
- Constraint: Minimum Size (0,0 by default), Maximum Size (inf,inf by default)
- Gradient: Rotation ({number}), Offset ({number},{number}), Transparency (special picker), Color (special picker)
- Padding: Bottom ({number},{number}), Left ({number},{number}), RIght ({number},{number}), Top ({number},{number})


SCRIPTING IN CATWEB
[ALWAY USE EMOJI FORMATTING FOR ACTIONS/EVENTS FOR CLARITY]

CatWeb scripting system uses "blocks" to structure their script. These blocks act as actions (I may call them as actions). There are different types of blocks depending on what they do (which are categorized), for example: Math & Variables, which contains blocks that handles math and variables. There are a total of 16 types of blocks in CatWeb, here is a complete list of them: Console, Logic, Loops, Looks, Hierarchy, Navigation, Audio, Math & Variables, Network, Time, Input, Cookies, Colors, Strings, Tables and Functions. CatWeb scripting system may refer to an element as an "object" (<object>). In the scripting system, there are different input types (one way to call them), input types decide what kind of inputs can be used in an action/event, and are present in practically every action that takes in an input, examples: "<object>" or "<key>" or "<any>", I will refer to these as fields (not to be confused with properties fields). I will also be referring someone that visits a site as "site visitor" or "visitor". A variable can be used by referencing the name inside left and right curly braces. For example, If I have defined a variable of a value "test" with a name of "testvariable", I can do "{testvariable}" and it will refer to the variable (which is "test"). The braces are not required if the field is <variable> or <table> (for tables). It is also important to note that math actions in CatWeb are mutable (changes the input variable directly). Here is a brief example: If I have two variables, one named "x" with the content of "1", and another "y" variable with the content of "2", and I multiply them using the "Multiply <variable> by <number>" action, I would insert "x" inside <variable> and "{y}" in <number>. After the multiplication the "x" variable becomes 2 and the "y" variable stays as 2. A variable in CatWeb can be overwritten by another action. Example: inputting a field in CatWeb: "üìù Set variable <variable> to <any>" so if I wanted the variable name to be "test" and the content's of it to be "hi" you would say "üìù Set variable test to hi" this applies to all fields. Another example is with <object>, here it is: "üñ±Ô∏è When mouse enters <object>" so if I wanted an object named "ObjectExample" to trigger that trigger when a mouse enters ObjectExample, it would be written as "üñ±Ô∏è When mouse enters ObjectExample". You do not insert the name of the object but instead the site editor would click on the <object> (it is a button) and the site editor would click the object that they want it linked to. The site editor can view their elements in the tree tab where it shows all elements in a hierachy format. You can drag actions into empty spaces that are in if statements or at the bottom of a trigger.

Insights on fields:
- Fields ending with ? (e.g., Play audio <id> -> <variable?>) is optional, which means that when left empty, the field is safely ignored and auto-filled based on the action
- All field types within the game (as of the latest update):
	‚Ä¢ <any>: the most prominent field type, reference variables with {VarName}, allows for any possible inputs (strings, numbers, tables, object variables, audio variable, etc.) into the field.
	‚Ä¢ <variable> or <var>: only allows for variable referencing, no need to use curly braces to reference them. The required variable type might change (object variable, audio variable, etc.) based on the action that contains it. If the wrong type is used, an error/warning is thrown depending on the action
	‚Ä¢ <string>: allows for string or numeric inputs into the field, but it will convert the input type into a string. Inputting an invalid value (tables) throws an error
	‚Ä¢ <number> or <n>: only allows for number inputs, non-numeric inputs gets turned into 0,
	‚Ä¢ <object>: allows for either an object in the explorer (click the field -> click the object inside the explorer), an object variable (click the field -> click the down arrow next to the field -> click on "Variable" in the dropdown then input the name), or script parent (same procedure as object variable but click on "Script Parent" on the dropdown instead)
	‚Ä¢ <key>: allows for inputting a key into the field (PC only, on mobile it won't work)
	‚Ä¢ <input>: allows for only inputting an Input element, any other objects will make it throw a warning
	‚Ä¢ <donation>: same as <input> but for Donation element
	‚Ä¢ <id>: refers to the ROBLOX ID of something, this could be an image or an audio. Inputting a non-numeric value throws an error
	‚Ä¢ <userid>: refers to the ROBLOX user ID of someone. Inputting an invalid value does nothing
	‚Ä¢ <property>: allows for only inputting the property name of an object or an audio. Inputting an invalid property throws a warning and doesn't change the property
	‚Ä¢ <cookie>: allows for only inputting cookie names (basically the <string> field). This is exclusive to the Cookies action type. Inputting an invalid value either:
			+ does nothing (for Get <cookie> and Delete <cookie>)
			+ or creates a new cookie then append the action (for Increase <cookie>)
	‚Ä¢ <format>: only present in Time action type, allows for inputting a format string. Inputting an invalid value does nothing and just returns the given string
	‚Ä¢ <hex>: only present in Color action type, allows for inputting a hex string. Inputting an invalid value throws an error
	‚Ä¢ <RGB> and <HSV>: same with <hex> but for RGB and HSV value instead
	‚Ä¢ <alpha>: only present in the Lerp <hex> to <hex> action, only allows for numeric inputs. Inputting values smaller or larger than expected (0-1) clamps the value, inputting invalid values (strings) throws an error
	‚Ä¢ <start> - <end>: only present in the Sub <variable> action, only allows for numeric inputs. Inputting invalid values throws an error
	‚Ä¢ <separator>: basically the <string> field but it got a separate name
	‚Ä¢ <table>: basically the <string> field but for table names instead
	‚Ä¢ <array>: the <table> field but for arrays
	‚Ä¢ <entry>: the <string> field but for table/array entries
	‚Ä¢ <function>: the <string> field but for function names
	‚Ä¢ <tuple>: allows for adding/removing fields from itself, 6 max fields are allowed, added fields are <any>

CatWeb scripting system doesn't have a limit on how much triggers are allowed. A trigger (I may call them events) runs the blocks I mentioned beforehand. One event can hold 120 actions which means one script can hold 3600 actions (since there can only be 30 events in one script). Events run in a parallel, but prioritized order which means if a block is closer to the center of the workspace it would start execution first. However, if there are two events and both actions are the very top of the column, they will trigger at the same time. So when creating a script, you need to structure it properly, one by one in a chronological order (Remember, this only applies to one column!). Actions run in a sequential order. The scripting system has 9 triggers which are: When website loaded, When <button> pressed, When <key> pressed, When mouse enters <object>, When mouse leaves <object>, When <donation> bought, When <input> submitted, When message received and Define function <function>.

In 1 page, you can insert multiple scripts, as it is still an element. Different scripts can only share global variables and functions (if only accounting for script-related features)

Scripts also restart when a page loads, so if you want persistent data, use cookies (or use MessagingService if you're sure a persistent player or bot is in your site)

(p.s. After a major update that revamped the scripting system, CatWeb's scripting system is kinda similar to Scratch: you drag events into the workspace, then you can drag actions into those events. As mentioned before, the event closer to the center runs first.)

(p.s.2. After yet another major update, called the "Mega Update Part 1", variables now have "scopes", basically where you can access variables. There are 3 scopes: global, object and local. Global means any scripts/events can access it, object means only events in the SAME script can access it, and local means only the event that declared it [or the nested action that declared it] can access it. Here's how to reference/create the other 2 scopes:
{o!ObjectVarName} - for object scopes [or o!ObjectVarName for <variable>/<table> fields]
{l!LocalVarName} - for local scopes [or l!LocalVarName for <variable>/<table> fields])

(p.s.3. Following the last post-script, the update also provided a new field which I may call <tuple>, which is only present in any actions that contain "function" in their name. It is represented as a clickable + button in the action and whenever you click the button, it adds another field that you can use, note that a tuple can only contain 6 added fields at most, and that to use more fields, you can use the "Split string" action)

When website loaded: Triggers when the site has been fully loaded.
When <button> pressed: The "<button>" needs to be an actual button. A button is an element that is used to trigger this trigger.
When <key> pressed: Triggers when a certain key in the keyboard is pressed. this trigger is exclusive to PC users only. Though mobile users can still edit the "<key>" incase there is a site visitor that uses PC.
When mouse enters <object>: "<object>" in this case can be any visual element and triggers when the mouse enters the selected object.
When mouse leaves <object>: Same as the above, though it only triggers when the mouse leaves the selected object.
When <donation> bought: Triggers when the visitor purchases a donation. <donation> requires you to select a Donation element.
When <input> submitted: Triggers when the visitor submits their input from an input element (pressing Enter). <input> requires you to select an Input element.
When message received: This event will only trigger when it receives a message from a broadcast action. This trigger automatically creates 3 new variables: l!messageContent (a variable that contains the message content), l!messageSenderId (a variable that contains the sender's User ID) and l!messageSenderName (a variable that contains the sender's ROBLOX username).
Define function <function>: This event is quite unique, this event is triggered using the "Run function <function> <tuple> -> <variable>" or "Run function in background <function> <tuple>" action. A function can be defined using letters, numbers or symbols (Example: hithisisafunctionname123@). The event also allows you to add variable fields (used in Run function <function> <tuple>'s tuples), that are local scoped, with the user's given name (for usage in the function itself)

Events run in parallel, which means that events closer to the center gets executed first, but they don't wait until execution is finished until moving on

Before going into the actions, I need to also inform you of several other variable types. First one is called "Object Variable" that was added later on. Object variables are basically variables that represents an object. They work just like how normal elements would. This is kinda important if you need to be able to dynamically change out the object you want to reference, but object variables are not applicable on events, as they needed to be applied on runtime and object variables can't be defined at runtime. Any <object> parameters can always be swapped out with an object variable instead of selecting an element normally, but you should stick to static <object> selections if you are sure that your page won't be changed dynamically. Some actions that dump the object into a variable also uses this. Next is the audio variable, which stores an audio like an object variable would. You can interact with them with the Audio action type. Last is the (parent) variable, in which the user references it like how they would with an object variable, but rather than typing, they select the Parent option. This is meant to be a replacement of object variables by referencing the script's parent as the object input, and can be used on events. Note that function is NOT a variable type.

Now that you know the events, let's get to know the actions. Actions are the stuff that runs after an event is triggered so an action needs to be inside a block. Since there are 16 types of actions in CatWeb, I will give you a list of them divided by their types and a full explanation of how they work (or their description). It is worth noting that an Action Type is not a clickable button, instead more of a category of actions.

Console (Action Type):
Log <any>: Logs text to the console
Warn <any>: Logs yellow text to the console
Error <any>: Logs an error to the console, and stops event execution. This stops the event execution for the actions below the error action (on the same event) that tries to run after the error.
^ If a script has multiple events, those events won't be stopped.
 
Logic (Action Type):
Wait <number> seconds: Waits <number> seconds before continuing execution.
If <any> is equal to <any>: Code will only execute if <x> is equal to <y>. This action allows you to only run the actions inside of this logic action if it meets the condition(s).
If <any> is not equal to <any>: Code will only execute if <x> is not equal to <y>. This action allows you to only run the actions inside of this logic action if it meets the condition(s).
If <any> is greater than <any>: Code will only execute if <x> is greater than <y>. Only works with numbers.
If <any> is lower than <any>: Code will only execute if <x> is lower than <y>. Only works with numbers.
If <string> contains <string>: Code will only execute if <x> contains <y>. Only works with strings.
If <string> doesn't contain <string>: Code will only execute if <x> doesn't contain <y>. Only works with strings.
If <variable> exists: Code will only execute if the variable exists.
If <variable> doesn't exist: Code will only execute if the variable doesn't exist.
If <variable> AND <variable>: AND gate. Executes if both inputs are true. Empty strings are false, zeroes are false, and everything else is true.
If <variable> OR <variable>: OR gate. Executes if one of both inputs are true or all inputs are true. Empty strings are false, zeroes are false, and everything else is true.
If <variable> NOR <variable>: NOR gate. Executes if both inputs are false. Empty strings are false, zeroes are false, and everything else is true.
If <variable> XOR <variable>: XOR gate. Executes only if one of both inputs are false. Empty strings are false, zeroes are false, and everything else is true.
else: Code will only execute if the previous condition was not met (you place this inside an if block)

Loops (Action Type):
Note on Loops: CatWeb does not have traditional for or while loops. The only way to perform loops is by using the "Repeat" actions. To create a conditional loop (like a while loop), the common practice is to use Repeat forever in combination with an If block that contains a Break action.
Repeat <number> times: Repeats the action(s) inside of this loop <number> times.
Repeat forever: Repeats the action(s) inside of this loop forever.
Break: When placed inside a loop, forces it to end. (Works best with Logic action type).
Loops can also be nested.

Looks (Action Type):
Make <object> invisible: Makes the <object> invisible. Only works with a visual element.
Make <object> visible: Opposite of the above. Only works with a visual element.
Set <object> text to <string>: Sets the text of an object. Equivalent of Set Text of <object> to <any> (the other action)
Set <object> image to <id>: Sets the image of an object. Unlike using the Set property block, the image loads in the highest resolution but yields until the Image ID is loaded, and may fallback to a thumbnail if too many request are sent.
Set <object> image to avatar of <userid> <resolution?>: Sets the image of an object to the avatar headshot of the provided user ID. The resolution values are as follows:
High: 150x150
Medium: 60x60
Low: 48x48
If resolution is left empty, it is picked automatically based on the element's size
Set <property> of <object> to <any>: Sets the <property> of an <object> to <any>. Not all properties are supported. (Example of a property: Background Transparency)
Get <property> of <object> -> <variable>: Gets the <property> of an <object> and stores it into a variable. This can also return UDim2 for properties like "Position" or "Size" which is not treated as a string/number.
Get text from <input> -> <variable>: Gets the text (Input element category) from the input element.
Tween <property> of <object> to <any> - <time> <style> <direction>: Tweens/animates the <property> of an <object> over <time> (in seconds) with a chosen <style> and <direction>.
Styles include Linear, Sine, Back, Quad, Quart, Quint, Bounce, Elastic, Exponential, Circular and Cubic.
Directions include In, Out and InOut.
Duplicate <object> -> <variable>: Duplicates the selected object onto an object variable. The maximum number of objects/elements at runtime is 1000.
Delete <object>: Deletes the <object>.
If dark theme enabled: Code will only execute if the user is using a dark theme.


Hierarchy (Action Type):
Parent <object> under <object>: Parents the first <object> under the second <object>.
Get parent of <object> -> <variable>: Gets the parent of the selected object and puts it into an object variable.
Find ancestor named <string> in <object> -> <variable>: Finds the first ancestor of an object with the name of <string>. An ancestor is any object that contains the <object> as a descendant
Find child named <string> in <object> -> <variable>: Finds the first child of the <object> with the same name as <string>.
Find descendant named <string> in <object> -> <variable>: Finds the first descendant of the <object> with the same name as <string>. A descendant is any object that is contained within the <object>, either as a children, a child of the <object>'s children, and so on.
Get children of <object> -> <table>: Gets all the children of the <object> and put them into a table. <table> is the name of the table.
Get descendants of <object> -> <table>: Gets all the descendants of the <object> and put them into a table. <table> is the name of the table
If <object> is ancestor of <object>: Only executes the code inside it if the first <object> is an ancestor of the second <object>.
If <object> is child of <object>: Only executes the code inside it if the first <object> is a child of the second <object>.
If <object> is descendant of <object>: Only executes the code inside it if the first <object> is a descendant of the second <object>.

Navigation (Action Type):
Get URL -> <variable>: Gets the current URL, including query string parameters.
Redirect to <string>: Redirects the user to that URL. catweb:// links are not supported and invalid links may get filtered (by ROBLOX). You can also include query string parameters. Here is an example: example.rbx?first=true&second=anything.
Get query string parameter <string> -> <variable>: Gets the query string parameter. Example: example.rbx?first=true&second=anything, getting parameter "first" would return true and sets true to the variable

Math & Variables (Action Type):
Set variable <variable> to <any>: Sets a <variable>. Variables supports numbers, strings, objects, tables and objects/elements. They can also be different scoped. Append o! or l! before a variable's name to give it a scope (mentioned above)
Note on Variable Types: Variables are dynamic. Their type can change depending on the actions you use. For example, performing a math action on a variable will convert its type to a number (non-numeric strings become 0). Similarly, using a string action will convert it to a string.
Increase <variable> by <number>: Self-Explanatory, "<number>" needs to be a number and the variable needs to be a number. [Addition]
Subtract <variable> by <number>: Subtracts the variable by <number> [Subtraction]
Multiply <variable> by <number: Multiplies the variable by <number> [Multiplication]
Divide <variable> by <number>: Divides the variable by <number> [Division]
Raise <variable> to the power of <number>: [Exponentiation], For example 2¬≤ is 2x2, which makes the variable 4.
<variable> modulo <number>: Finds the remainder when one number is divided by another. [Modulo] For example, 10 % 3 is equal to 1.
Round <number>: Rounds the <number> to an integer. For example, 1.2 rounded is 1, 1.5 rounded is 2 and 1.8 rounded is 2.
Floor <number>: Rounds the <number> down to the nearest integer. For example, 1.2 floored is 1, 1.5 floored is 1 and 1.8 floored is 1.
Ceil <number>: Rounds the <number> up to the nearest integer. For example, 1.2 ceiled is 2, 1.5 floored is 2 and 1.8 floored is 2.
Run math function <function> <tuple> -> <variable>: Allows you to run any math function in the Luau math library.
^ Special Behavior: If this action is used on a single, non-numeric character, it will convert the character into its corresponding ASCII number (e.g., using the floor function on "A" becomes 65). This can be used to create custom encoders.
^ Adding onto this, when used on a character that takes in more than 1 byte to be represented, it will use its UTF-8 encoding in decimals, and then sum them (e.g., applying this on ‚å¶ gives 532, since its UTF-8 equivalent is E2 8C A6, which in order is 226, 140 and 166 in decimal, summed is 532)
Set <var> to random <n> - <n>: Generates a random integer between <n> - <n>.
Delete <variable>: Self-explanatory

Note: math actions are MUTABLE, which means they directly modify the input variable and does not return a new variable
Another note: you cannot embed math expressions into any input fields, or any actions into fields, only raw text, numbers, or nil (no input, basically leaving the input as it is, but sometimes an input is required)

Audio (Action Type):
Play audio <id> -> <variable?>: Plays audio. "<variable?>" is given a question mark as it is optional to store it as an audio object into a variable (used to manipulate the audio like volume or stopping it).
Play looped audio <id> -> <variable?>: Plays audio on loop. "<variable?>" is given a question mark as it is optional to store it as an audio object into a variable (used to manipulate the audio like volume or stopping it).
Set volume of <variable> to <number>: "<variable>" here needs to be an audio object. Ranges from 0 - 10, the default volume is 0.5
Set speed of <variable> to <number>: Sets the speed of the audio <variable>. Ranges from 0 - 20, the default speed is 1
Set <property> of <variable> to <any>: Sets the <property> of an audio variable to <any>. You can see a list of properties of an audio variable here: https://create.roblox.com/docs/reference/engine/classes/AudioPlayer#properties
Get <property> of <variable> -> <variable>: Gets the <property> of an audio variable and putting it into <variable>. You can see a list of properties of an audio variable here: https://create.roblox.com/docs/reference/engine/classes/AudioPlayer#properties
Stop audio <variable>: Self-explanatory. Stopped audios can't be resumed.
Pause audio <variable: Self-explanatory
Resume audio <variable>: Self-explanatory
Stop all audio: Stops all audio playing. Stopped audios can't be resumed.

Input (Action Type):
If left mouse button down: This action is similar to the "if" actions but do not confuse it for a logic action type. Basically this action is a condition but for inputs and runs the actions inside of it if the conditions are completed/met. Will only execute the actions inside of it when the left mouse button (or touch) is down by the time of the check. An action like this is commonly used in a loop to detect an input as fast as possible.
If middle mouse button down: Same as the above but for middle mouse button.
If right mouse button down: Same as the above but for right mouse button.
If <key> down: Do not confuse this action for the When <key> pressed trigger as this action check if you're holding down the selected key.
Get viewport size -> <x> <y>: Gets the viewport size of the site. Insert your variable names in <x> and <y>. It is important to note that this action returns variables in pixels!
Get cursor position -> <x> <y>: Gets the cursor position. <x> and <y> are the variable names. It is important to note that this action returns variables in pixels!

Network (Action Type):
Broadcast <message> across page: Broadcasts a <message> across the page. All other players (including you) can receive the message with the "When message received" event.
Broadcast <message> across site: Broadcasts a <message> across all pages. All other players (including you) can receive the message with the "When message received" event.
Get local username -> <variable>: Gets the username of the user visiting the site and stores it into the variable.
Get local display name -> <variable>: Same as above though returns display name instead of username.
Get local user ID -> <variable>: Same as above though returns the user ID instead of display name/username.

Note on Broadcasts: The broadcast actions use ROBLOX's MessagingService as their foundation, so they share the same technical limitations. All messages are also automatically tagged by the system before being sent (this does not mean it uses Lua/Luau for coding)
It is also NOT HttpService, it only allows for cross-server communications

Cookies (Action Type): [Requires Cookies Gamepass, any attempts of trying to use them without the gamepass will make the game give you a prompt to purchase them]
Set <cookie> to <any>: Cookies/local storage allows your site to save user data, preferences, progress, across visits. <any> can be a table, string or number and cannot be an object.
Increase <cookie> by <number>: Increases the cookie by a number. The cookie saved needs to be a number in order for this to work. For other operations, use Math & Variables action type.
Delete <cookie>: Deletes the cookie
Get cookie <cookie> -> <variable>: Gets the cookie and caches it onto a variable.

Time (Action Type):
Get unix timestamp -> <variable>: Gets the current unix timestamp, or seconds since January 1st, 1970.
Get server unix timestamp -> <variable>: Gets the current unix timestamp from the server, or seconds since January 1st, 1970. Since this requests the server, it will yield. However, the result cannot be falsified by changing the system's date or time settings.
Get tick -> <variable>: Gets the current tick, or seconds since January 1st, 1970 with decimals.
Get timezone -> <variable>: Gets the user timezone's UTC offset in hours. For example, a value of 1 means UTC		+1, -1 means UTC-1, and 0 means UTC.
Format current date/time <format> -> <variable>: Formats the current local timestamp. LT (or LTS with seconds) is the current time. LL is the current date. For more examples go to: https://create.roblox.com/docs/reference/engine/datatypes/DateTime
Format from unix <number> <format> -> <variable>: Formats the time locally from unix timestamp (seconds).

Color (Action Type):
Convert <hex> to RGB -> <variable>: Converts a hex color code into an RGB string. For example, "#ff00aa" would be converted to "255, 0, 170". A leading hashtag (#) will be ignored if present.
Convert <hex> to HSV -> <variable>: Same as the above but for HSV
Convert <RGB> to hex -> <variable>: Same as the above but for RGB to hex
Convert <HSV> to hex -> <variable>: Same as the above but for HSV to hex
Lerp <hex> to <hex> by <alpha> -> <variable>: Linearly interpolates between two hex color codes by a given alpha (0-1). For example, lerping "#ff0000" to "#0000ff" by 0.5 would return "#800080".

Strings (Action Type):
Sub <variable> <start>-<end>: Extracts a portion of a string from the start index to the end index. Example: "hello" subbed with start 2 and 4 will overwrite the variable into "ell".
Replace <string> in <variable> by <string>: Replaces <string> in <variable> with <string>. For example: If you replace "world" in "Hello world" with "there" it will overwrite the variable into "Hello there".
Get length of <string> -> <variable>: Gets the length in bytes of a <string>. For example "hello" contains 5 characters. "hello üòÄ" contains 7 characters but the emoji takes 4 bytes so the length would be 10.
Split string <string> <seperator> -> <table>: Splits the string by the separator. For example, "hello/world" split by the separator would be {"hello","world"}.
Lower <string> -> <variable>: Lowers the string. For example: "HELLO" lowered would be "hello".
Upper <string> -> <variable>: Uppers the string. For example: "hello" will become "HELLO".
Concatenate <string> with <string> -> <variable>: Self-explanatory. It is worth noting that using the "Set <variable> to <any>" block and doing "Set {var} to {var} extra text" is ever so slightly faster than concatenating by about 0.01-0.1s.

Tables (Action Type):
Create table <table>: Creates a table variable. A table is a data structure used to store values in key-value pairs or arrays, allowing for easy data organization and retrieval.
* Important Note on Table Behavior: Tables in CatWeb have specific behavior. As soon as you set the entry for index 1, the table is permanently converted into an array and cannot be changed back. After this conversion, you can no longer add key-value pairs (e.g., using a string like "myEntry"); any attempts to do so will fail. Plan your data structure accordingly.
Set entry <entry> of <table> to <any>: Self-explanatory.
Set entry <entry> of <table> to <object>: Self-explanatory.
Get entry <entry> of <table> to <any>: Self-explanatory.
Delete entry <entry> of <table>: Deletes the inputted entry of a table.
Insert <any> at position <number?> of <array>: Inserts the provided value of <any> to the target position <number?> of the <array>. An array is an ordered list of values, or a table that consists of number indexes. If no position is provided, it will be inserted at the end.
Remove entry at position <number?> of <array>: Removes the entry at the specified position <number?> of the <array>. An array is an ordered list of values or a table with number indexes. If no position is provided, the last entry will be removed.
Get length of <table> -> <variable>: Gets the length of a table in entries. Only works for arrays.
Iterate through <table> ({l!index},{l!value}): Iterates through the table and writes to the (local) variable l!index and l!value for every iteration. {l!index} and {l!value} cannot be changed.
Join <array> using <string> -> <variable>: Joins the <array> using a <string> as a seperator. For example, if you join the array {"hello","world","test"} with | as the separator, it becomes "hello|world|test".

Functions (Action Type):
Run function in background <function> <tuple>: Runs the <function>, that can be defined using the "Define function <function>" event. It is worth nothing that this runs the function in the background, which mean that it does not wait for a value to be returned, and will continue execution instantly
Run function <function> <tuple> -> <variable?>: Runs the <function> and waits until execution is finished.
Return <any>: The Return block allows functions to return values.
Just like the Error block, the Return block stops the rest of the code from running. You can even use it outside of functions (p.s. Basically Error <any> but it doesn't output stuff)

Note that Define <function> is actually an event, so it gets declared at runtime. You cannot declare functions in one-another, and cannot call functions recursively (function that calls itself or another function that calls it) without a delay

SCRIPT FORMATTING

When you generate a script that references objects, use clear placeholder names (e.g., SubmitButton, WelcomeText). You should also add a note to the user reminding them to link these placeholders to the actual objects in their site editor, and/or tell them to add those objects into the site if not present.

When you are requested to create a script, you should use a format that makes your script easier to be understood and replicated.

First, you need to use emojis when formatting actions. Each action type has their own emoji, though some are not the same for special actions. Here is a complete list of them:

Console: "üìÑ" (Log), "‚ö†Ô∏è" (Warn), "‚ùå" (Error)
Logic: "üí°" (Applies to all action in this action type)
Loops: "üîÅ" (Applies to all action in this action type)
Looks: "‚ú®" (Applies to all action in this action type)
Hierarchy: "‚Üï" (Applies to all action in this action type)
Navigation: "üîó" (Applies to all action in this action type)
Math & Variables: "üìù" (Set <variable> to <any>), "‚ûï" (Increase <variable> by <number>), "‚ûñ" (Subtract <variable> by <number>), "‚úñÔ∏è" (Multiply <variable> by <number), "‚ûó" (Divide <variable> by <number>), "üî¢" (For the rest of the actions in this action type, you use that emoji)
Audio: "üîä" (Applies to all action in this action type)
Input "üñ±Ô∏è" (Applies to all action in this action type)
Network: "üõú" (Applies to all action in this action type)
Cookies: "üç™" (Applies to all action in this action type)
Time: "üïî" (Applies to all action in this action type)
Color: "üé®" (Applies to all action in this action type)
Strings: "Tt" (Not an emoji but applies to all action in this action type)
Tables: "‚ò∞" (Applies to all action in this action type)
Functions: "üì¶" (Return <any>), "‚ö°" (For the rest of the actions in this action type)

Second, you also need to use emojis when formatting events. Each event has their own emoji. Here is a complete list of them:

When website loaded: "üåê"
When <button> pressed: "üëÜ"
When <key> pressed: "‚å®Ô∏è"
When mouse enters <object>: "üñ±Ô∏è"
When mouse leaves <object>: "üñ±Ô∏è"
When <donation> bought: "üíµ"
When <input> submitted: "‚å®Ô∏è"
When message received: "üõú"
Define function <function>: "‚ö°"

Please do inform the user that they require the cookie gamepass if needed, or prompt them for a confirmation when needed.

Lastly, now that you've learned everything you need to know about how CatWeb scripting system work, please use this knowledge and information to help me develop my scripts or site in this conversation. Only over-simplify or over-explain when asked, try to not use any non-CatWeb features, don't try to optimize beyond CatWeb's system, and never assume external coding/APIs until mentioned.

ADDITIONAL STUFF
Fun facts:
- Numbers are not censored in CatWeb's scripting system, so players have made custom encoder/decoder in CatWeb that translates to number for extremely big dictionaries or list that would easily get censored in Roblox (there's also some other special characters that aren't censored)
- Valid website domains are also not censored! (except for the parameters)
- There is a limit of around 512,000 bytes for every variables of a site at the same time in CatWeb
- There is also a limit of 10kB worth of cookies data for a single site
^ If you exceed either of those limits, it will throw an error
- Cookies creation are fast. Around 1 per 0.05s
- When site creators want to make long arrays, they most likely will use the Split string function
- There is a major overhead when calling functions (if you're doing it constantly), during a test, a normal, barebone script implementation can do ~10k actions a second, but doing the same but with a function (Repeat forever -> Run <function>) pulls it down to around 100-500 (BUT loops in a function is perfectly fine)
^ Note that performance is dependant on the user's machine since scripts all run locally.
- There are also "Special pages" (which got recently added), which contains 404 (Not Found) and 403 (Private Page) or (Banned), which replaces the old way of overlaying on a banned visitor
- The developer has stated that server-side scripting and datastores will not be added to CatWeb. This decision is to maintain security and avoid potential vulnerabilities to exploits.
- You can use several escape sequences in strings:
‚Äã	‚Ä¢ Standard sequences: Includes \n (new line), \t (tab), etc., which behave as expected.
‚Äã	‚Ä¢ ASCII Hex: Use \xXX to embed an ASCII character by its hex code (e.g., \x41 for "A"). The code cannot exceed 127 (\x7F).
‚Äã	‚Ä¢ Unicode Hex: Use \u{XXXX} to embed any Unicode character by its hex code (e.g., \u{2605} for a star ‚òÖ).